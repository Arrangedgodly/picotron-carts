picotron cartridge // www.picotron.net
version 2

:: afx/
:: afx/0.afx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEyLTE1IDE2OjE2OjUxIixtb2RpZmllZD0iMjAyNC0x
Mi0xNSAyMTozNDowNyIscmV2aXNpb249N11dbHo0AEgAAABHAAAA8Qx7YW5pbWF0aW9ucz17e2Zy
YW1lcmF0ZT0xMiwNAPAYcz17NCw1LDYsNywzLDEsMn0sbG9vcD1mYWxzZSxuYW1lPSIifX19
:: afx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEyLTEyIDA2OjU4OjM5Iixtb2RpZmllZD0iMjAyNC0x
Mi0xNSAyMTo0NToxOCJdXQ==
:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEyLTExIDIwOjU1OjM5Iixtb2RpZmllZD0iMjAyNC0x
Mi0xNSAyMTo0NToxOCIscmV2aXNpb249MTY4OF1dbHo0AGECAADOMgAA8yF7WzBdPXtibXA9cHh1
AEMgEBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIAMt5PTAsem9vbT04fSw_AP8ZAwbQ
FtAGECaQVpAWEAagBiAGMEZAZgAGYBZAFmAGQBbAFsAW0AbwJlgAHfAGFycAF2CHUEcgF1AXMCew
F9A34AfACAB-J8An4AfwFVAAHf8KFl8WgC6wHtAO4F6gToAukD6wbtA_oE7gLksAH-8jFDWwBUAl
YBUANQAFgBUwBXAVMBVwBQAFEBVwFQA1gAUgFYAVEGVAFRAVMAVgVcAF8BdiAB3xFwUvFaAuwA4w
TlAOIC4AHlAuMB5QHhAuEB5ALjAOAB5ADgAOMA4ABgCwEE4ALjAOED4ALlAcAL8OYC4gLnBekC7w
CHUAHvAPbw9wHtAeED6ADgAeEB5wDgAOIB6ALgAuUH4ADjBObQDgMA4QDiAOEB4wHgAOIA6ZAAAG
AG9wfpBe8BRvABnyDiAgBPAkDxLwDh7wDS7wDQ4QDtBecA4QDvAEDlAeBwDwEA4wDvACjiAe8AAu
IF4QDuAuIC4wPtAeIC4wTsAuAE6QAHCQLgAuAA5Q8QDwAE4gDjA_ID6gDjAOIE4AXggAkBAuAG4A
DrAOIKwAQE4gHrAcAP8mXiAewA4wPhAuMA7QTgAOAD4wLvABTjA_AA7wAg4AvvACDjA_AB7wBU4w
XvADDqAe8A8O8JPaAAsdNUkBH-AxAAsfOTEA----------------------------------------
----------------------9gUG09OX19
:: gfx/sprites.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEyLTEzIDAwOjIwOjA1Iixtb2RpZmllZD0iMjAyNC0x
Mi0xMyAwMjowODo1MCIscmV2aXNpb249OV1dbHo0AMkCAADJNAAA8yF7WzBdPXtibXA9cHh1AEMg
EBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIAMp5PTAsem9vbT04fSw_APEAwSABLxAB
JhEGAQ4BEAEuCgAzHgEACgBQLhEuAVYGAPYAcS4R3hHeER6RHhEeAXcBBgA-FzEXDgADL-EBigAc
8QDMIAwvHAwmHAYMDgwQDC4KADMeDAAKAFAuHC4MVgYA9gB8LhzeHN4cHpweHB4MdwwGAD8XPBcO
AAMf-IoAHfUC-yAB1h7WHtb_AQAOJgd2DhAGAIAOFg42DiAOFgkAPyYOMAkACCAeBgkARxYOUA4J
AF9WDmB_MI0AHWIXAd8YHxcEANP-FwEADi8YCH0OEA4tBgCADh0OPQ4gDh0JAD8tDjAJAAggHg0J
AEcdDlAOCQAfXZQAIPETMIVQBY8gBTAFrgUwBZ4FQGUuBTAFUAUuBSAFDgVABS4FEAwAU04VTgUg
DgAxQAUODACTUAUwBS5lQAWePgBPjgVQhX8AHvERhlAGhwYwBqcGMAaXBkBmJwYwBlAGJwYgBgcG
QAYnBhAMAFNHFkcGIA4AMUAGBwwAk1AGMAYnZkAGlz4AT4cGUIZ_AB3wETWwBS8gFZAFThVwBW4V
UAWOFTAFrhUQBc4FAAXeFd4VCAAAEAAAGAAAIAAAKABfLhWQNbBoABzwEDawBicWkAZHFnAGZxZQ
BocWMAanFhAGxwYABtcW1xYIAAAQAAAYAAAgAAAoAE8nFpA2ZwAdv-ACtSAFvyAFEAW_BAAWTyC1
8AJnAB5vtiAGtwYQBAAYLyC2ZgAfgQMlMCVABS8gdAI-MAUuCABCb0AlMCXwA5sAHjQmMCaeAh8w
CABET0AmMCaaAB8f8DEA--------------------------------------------------------
-----4lQbT04fX0=
:: gfx/ui.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEyLTEzIDAyOjA4OjU4Iixtb2RpZmllZD0iMjAyNC0x
Mi0xNSAyMTo0NToxOCIscmV2aXNpb249ODgyXV1sejQAqQQAAOE2AADzIXtbMF09e2JtcD1weHUA
QyAQEATwVgcQB8AX0BfABxAH8FYsZmxhZ3M9MCxwYW5feAgAynk9MCx6b29tPTZ9LD4A8QDBIAEv
EAEmEQYBDgEQAS4KADMeAQAKAFAuES4BVgYA9gBxLhHeEd4RHpEeER4BdwEGAD8XMRcOAAMv8QGK
ABzxAMwgDC8cDCYcBgwODBAMLgoAMx4MAAoAUC4cLgxWBgD2AHwuHN4c3hwenB4cHgx3DAYAPxc8
Fw4AAx-8igAd8QD-IAHWHtYe1v4BAA62DhAEAP8ANg4WDjYOIA4mDhYOJg4wCAAFMB4WDgIAJFAO
CABfdg5gfjCAAB1iFwHfGB8XBAD-Dv8XAQAOvxgOEA69DhAOPQ4dDj0OIA4tDh0OLQ4wCAAFMB4d
DgIAJFAOCAAffYcAIPESMIdQB4YHMAemBzAHlgdAZyYHMAdQByYHIAcGB0AHJgcQDABTRhdGByAO
ADFABwYMAJNQBzAHJmdAB5Y_AE_GB1CHfgAe8RGGUAaHBjAGpwYwBpcGQGYnBjAGUAYnBiAGBwZA
BicGEAwAU0cWRwYgDgAxQAYHDACTUAYwBidmQAaXPgBPhwZQhn4AHfAQN7AHJheQB0YXcAdmF1AH
hhcwB6YXEAfGBwAH1hfWFwgAABAAABgAACAAACgAXyYXkDewZwAc8BA2sAYnFpAGRxZwBmcWUAaH
FjAGpxYQBscGAAbXFtcWCAAAEAAAGAAAIAAAKABPJxaQNmcAHY-wArcgB7YHEAQAGE8gt-ACZgAe
b7YgBrcGEAQAGC8gtmYAH0QDJzAnfwIfMAgARG9AJzAn8AOaAB40JjAmmwIfMAgARE9AJjAmmgAe
-wCQNKBUEATKEAQPGbkQBA4EABM-1PABZwAh6tQQ1BAkugAkDxmpACQOBACAFA65ABQOqRAEAABj
AC8Ouf8BH4MWJkAGUAYXFggEIRYQCADiNxYABgcGAEZHJgcWpxYEACCXJhIAAhoABioAAjoAb1Am
QAbwEXwAHnMnQAdQBxYXAgUhFxAIAOI2FwAHBgcAR0YnBhemFwQAIJYnEgACGgAGKgACOgBPUCdA
B3wAHvEkPxhwThgeUB4YHigeMB4oLigeEB4oHgAeKD4oHiAeKB4oHkAeWB5gHjgecB44HmAeWB5A
FgARICIAIQAeMAARLjwAER5IAD9OcD6DABzxJDhwSB8YGFAYHhguGDAYLiguGBAYLhgAGC44Lhgg
GC4YLhhAGF4YYBg_GHAYPhhgGF4YQBYAESAiACEAGDAAESg8ACAYHkgAP0hwOIMAHP89oE8boA4r
DpAeKw6QDjsOgB47PlAOOy4LHjAeOw4ADhseIA47HgAOKx4AHjsOEA47LjseEB47HjsOMB57HkAe
aw5gHksecB4rHpBOUHsAHf86S6ALIwuQGyMLkAszC4AbMztQCzMrAxswGzMLAAsTGyALMxsACyMb
ABszCxALMyszGxAbMxszCzAbcxtAG2MLYBtDG3AbIxuQS3oAHS-w8DEA--------------------
----------------------------------------AFBtPTZ9fQ==
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEyLTExIDIxOjAzOjIwIixtb2RpZmllZD0iMjAyNC0x
Mi0xNSAyMTo0NToxOCJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEyLTExIDIwOjU1OjM5Iixtb2RpZmllZD0iMjAyNC0x
Mi0xNSAyMTo0NToxOCIscmV2aXNpb249MTY0OF1dbHo0AGgAAABYEAAA8Ah7e2JtcD11c2VyZGF0
YSgiaTE2IiwzMgMALyIwAQD--------------------78QgiKSxoaWRkZW49ZmFsc2UscGFuX3g9
MAgA0nk9MCx0aWxlX2g9MTYKABB3CgCAem9vbT0xfX0=
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEyLTExIDIxOjAzOjIwIixtb2RpZmllZD0iMjAyNC0x
Mi0xNSAyMTo0NToxOCJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEyLTExIDIwOjU1OjM5Iixtb2RpZmllZD0iMjAyNC0x
Mi0xNSAyMTo0NToxOCIscmV2aXNpb249MTY0MF1dbHo0AAwCAABfDAAA-zBweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDQA8PkAQFBgdADJAICQoLQAyQDwwPDQ8ODEAM8P8BAOv6D6oB
EAYPIBABIAEgAfAAAhACDhABIA8hIAEwD0CQARAA-wvwow8oD--wxg-4Cg--D4AP9w8NAfAJARAG
DkAAAy-wwzAA------_lH-8BAKzyCcgPQAAPEEAPJw8lDyr--y0g-S0u-S3wcBcApB8n-S4Q-S4e
-S4SAKUPJf0vAP0vDv0vEgDmLA0PJ-0tAA0A-S0ODQ49AHsPLg8qDyz9UwAtDyxBAD0nDypnAPUG
Lg8mDyQPKQ8rDy0vL-0ngP0njv0nHgD3AC8PLQ8vDy79LDD9LD79LDYAHy9yAAA9Mw84YAD1BjgP
Mw82DzoPOA86Hzb9KHD9KH79KB4AIEEPBABRQw9FD0MMAIE_DzwPPg9AHwwAER8MACUPQRwABCwA
HEcwAAAMABgfJAAbQVgAAhwAARIAlB9HD0PwMP8wMIUA8AEfKQ0PKA0DDR8mDQ8kDQQNEABhKw8t
DQ8rCwBQJg0FDRQNAIAEDQMNEw0HDRsA9AgpDQMNFQ0DDRgNAw0FDQgNBRANAA0ADQYAFxAMABkA
CAACCgAFDgCDHzANCQ0JDRkGABcZDAAZCQgAAgoABQ4ABLwAJ-2wCgAf-wEA-9ZQ-----90=
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEyLTExIDIxOjAzOjIwIixtb2RpZmllZD0iMjAyNC0x
Mi0xNSAyMTo0NToxOCJdXQ==
:: vgfx/
:: vgfx/0.vgfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEyLTExIDIwOjU3OjMwIixtb2RpZmllZD0iMjAyNC0x
Mi0xMSAyMTowMzoyMCIscmV2aXNpb249MzBdXWx6NACOAAAA0QAAALB7e3tjb2xfYT0xLAgA8Cti
PTE2LGZpbGw9NDM2OTAsbmFtZT0iIixvdXRsaW5lPS0xLHBvaW50cz17ezQwLC00MH0sey0xMCwx
CQDzDjAsNDB9fSxzaG93PXRydWUsdHlwZT0iZWFyIn0saAATOGgAEjJnAE8zNzc0ZwALFS1oAD8x
MyxmAApQciJ9fX0=
:: vgfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTEyLTExIDIwOjU3OjMwIixtb2RpZmllZD0iMjAyNC0x
Mi0xNSAyMTo0NToxOCJdXQ==
:: animation.lua
--[[pod_format="raw",created="2024-12-15 04:03:37",modified="2024-12-15 21:45:18",revision=247]]
-- AFX File Format Handler
-- Manages .afx animation files containing multiple named animations
-- with configurable framerates and playback settings

AFX = {}

function AFX:new()
	local afx = {
		animations = {}
	}
	setmetatable(afx, self)
	self.__index = self
	return afx
end

function AFX:add_animation(name, frames, framerate, loop)
	assert(type(name) == "string", "Animation name must be a string")
	assert(type(frames) == "table" and #frames > 0, "Frames must be a non-empty table")
	assert(type(framerate) == "number" and framerate > 0, "Framerate must be a positive number")
	assert(type(loop) == "boolean", "Loop must be a boolean")

	local animation = {
		name = name,
		frames = frames,
		framerate = framerate,
		loop = loop
	}

	table.insert(self.animations, animation)
	return animation
end

function AFX:remove_animation(name)
	for i, anim in ipairs(self.animations) do
		if anim.name == name then
			table.remove(self.animations, i)
			return true
		end
	end
	return false
end

function AFX:get_animation(name)
	for _, anim in ipairs(self.animations) do
		if anim.name == name then
			return anim
		end
	end
	return nil
end

function AFX:save(filename)
	if not filename:match("%.afx$") then
		filename = filename .. ".afx"
	end
	store(filename, self)
	return true
end

function AFX:load(filename)
	if not filename:match("%.afx$") then
		filename = filename .. ".afx"
	end
	
	local data = fetch(filename)
	if not data then return nil end
	
	self.animations = data.animations
	return true
end

function AFX:get_animation_names()
    local names = {}
    for _, anim in ipairs(self.animations) do
        add(names, anim.name)
    end
    return names
end

-- Animation playback state manager
AFXPlayer = {}

function AFXPlayer:new(afx_data)
	local player = {
		afx_data = afx_data,
		current_animation = nil,
		current_frame_index = 1,
		frame_timer = 0,
		is_playing = false
	}
	setmetatable(player, self)
	self.__index = self
	return player
end

function AFXPlayer:play(animation_name)
	local animation = self.afx_data:get_animation(animation_name)
	if not animation then
		return false
	end

	self.current_animation = animation
	self.current_frame_index = 1
	self.frame_timer = 0
	self.is_playing = true
	return true
end

function AFXPlayer:stop()
	self.is_playing = false
end

function AFXPlayer:update()
	if not self.is_playing or not self.current_animation then
		return nil
	end

	self.frame_timer += 1
	local frames_to_advance = flr(self.frame_timer * self.current_animation.framerate / 60)
	
	if frames_to_advance >= 1 then
		self.frame_timer = 0
		self.current_frame_index += frames_to_advance

		if self.current_frame_index > #self.current_animation.frames then
			if self.current_animation.loop then
				self.current_frame_index = ((self.current_frame_index - 1) % #self.current_animation.frames) + 1
			else
				self.current_frame_index = #self.current_animation.frames
				self.is_playing = false
			end
		end
	end

	return self.current_animation.frames[self.current_frame_index]
end

return {
	AFX = AFX,
	AFXPlayer = AFXPlayer
}
:: animation_manager.lua
--[[pod_format="raw",created="2024-12-15 21:42:30",modified="2024-12-15 21:45:18",revision=7]]
function create_animation_manager(parent, config)
    local animation_list = {}
    local selected_animation = nil
    
    -- Create the animation list container
    local container = parent:attach{
        x = config.x or 8,
        y = config.y or 120,
        width = config.width or parent.width - 16,
        height = config.height or 100,
        draw = function(self)
            rectfill(0, 0, self.width, self.height, theme"window_bg")
            rect(0, 0, self.width, self.height, theme"window_frame")
            
            -- Draw animation list
            local y = 4
            for i, anim_name in ipairs(animation_list) do
                local color = theme"text"
                if anim_name == selected_animation then
                    color = theme"accent"
                    rectfill(2, y-1, self.width-2, y+7, theme"selection")
                end
                print(anim_name, 4, y, color)
                y += 10
            end
        end,
        
        click = function(self, mx, my)
            local index = flr(my / 10) + 1
            if index <= #animation_list then
                selected_animation = animation_list[index]
                -- Stop current animation if playing
                if animation_playing then
                    animation_playing = false
                    playButton:set_active(false)
                end
                -- Load the selected animation
                afx_player:play(selected_animation)
                afx_player:stop() -- Don't start playing immediately
            end
        end,
        
        refresh_list = function(self)
            animation_list = current_afx:get_animation_names()
        end
    }
    
    return container
end
:: button.lua
--[[pod_format="raw",created="2024-12-13 05:48:40",modified="2024-12-15 21:45:18",revision=673]]
-- Create a hoverable button with consistent behavior and optional active state
function create_hover_button(parent, config)
    -- Default configuration
    config = config or {}
    local default_config = {
        x = 0,
        y = 0,
        width = 16,
        height = 16,
        normal_sprite = nil,     -- Sprite shown in normal state
        hover_sprite = nil,      -- Sprite shown when hovered
        active_sprite = nil,     -- Sprite shown when active (if toggle_mode is true)
        active_hover_sprite = nil, -- Sprite shown when active and hovered
        hover_duration = 2,      -- How long hover effect lasts
        toggle_mode = false,     -- Whether the button toggles between states
        onclick = function() end, -- Click handler
        onactivate = function() end,   -- Called when button becomes active
        ondeactivate = function() end  -- Called when button becomes inactive
    }

    -- Merge provided config with defaults
    for k,v in pairs(default_config) do
        if config[k] == nil then
            config[k] = v
        end
    end

    return parent:attach{
        x = config.x,
        y = config.y,
        width = config.width,
        height = config.height,
        hovered = 0,
        active = false,
        
        draw = function(self)
            if self.active then
                if self.hovered > 0 and config.active_hover_sprite then
                    spr(config.active_hover_sprite)
                elseif config.active_sprite then
                    spr(config.active_sprite)
                end
            else
                if self.hovered > 0 and config.hover_sprite then
                    spr(config.hover_sprite)
                elseif config.normal_sprite then
                    spr(config.normal_sprite)
                end
            end
        end,
        
        hover = function(self)
            self.hovered = config.hover_duration
        end,
        
        update = function(self)
            if self.hovered > 0 then
                self.hovered -= 1
            end
        end,
        
        click = function(self)
            if config.toggle_mode then
                self.active = not self.active
                if self.active then
                    config.onactivate(self)
                else
                    config.ondeactivate(self)
                end
            end
            config.onclick(self)
        end,

        -- Helper methods to control state externally
        set_active = function(self, state)
            self.active = state
            if state then
                config.onactivate(self)
            else
                config.ondeactivate(self)
            end
        end
    }
end

-- Helper function to create a button group container
function create_button_group(parent, config)
    return parent:attach{
        x = config.x or 0,
        y = config.y or 0,
        width = config.width or parent.width,
        height = config.height or 16
    }
end
:: gui.lua
--[[pod_format="raw",created="2024-12-11 21:26:33",modified="2024-12-15 21:45:18",revision=2029]]
gui = create_gui()

include "button.lua"
include "animation.lua"
include "animation_manager.lua"

local ui = fetch("./gfx/ui.gfx")
local colors = {
    menu_background = theme"icon0",
    button_unselect = theme"icon1",
    button_select = theme"icon0",
    button_text = theme"icon2",
    container_bg = 5,
}

local menuBar = gui:attach{
    x=320,
    y=0,
    width = 160,
    height = 270,
    draw = function(self)
        rectfill(0,0,self.width,self.height,colors.menu_background)
    end
}

local anim_settings = create_button_group(menuBar, {
    x = 8,
    y = 30
})

local text_bar = anim_settings:attach_text_editor{
    x = 10,
    y = 0,
    width = menuBar.width - 32,
    height = 15,
    block_scrolling = true
}

text_bar.on_text_changed = function(self)
    current_animation.name = self.text
end

local text_label = anim_settings:attach{
	x = 35,
	y = 5,
	width = menuBar.width,
	height = 32,
	draw = function(self)
		print("Animation Name")
	end
}

local frame_rate_settings = create_button_group(menuBar, {
    x = 8,
    y = 60
})

local frame_rate_bar = frame_rate_settings:attach_text_editor{
    x = 10,
    y = 0,
    width = menuBar.width - 32,
    height = 15,
    block_scrolling = true
}

frame_rate_bar.on_text_changed = function(self)
    local rate = tonumber(self.text)
    if rate and rate > 0 then
        current_animation.framerate = rate
    end
end

local frame_rate_label = frame_rate_settings:attach{
	x = 40,
	y = 5,
	width = menuBar.width,
	height = 32,
	draw = function(self)
		print("Frame Rate")
	end
}

local controls = create_button_group(menuBar, {
    x = 8,
    y = 8
})

local loadButton = create_hover_button(controls, {
    x = 32,
    normal_sprite = ui[13].bmp,
    hover_sprite = ui[14].bmp,
    onclick = function()
        popup_open = true
    end
})

local saveButton = create_hover_button(controls, {
    x = 64,
    normal_sprite = ui[1].bmp,
    hover_sprite = ui[2].bmp
})

local deleteButton = create_hover_button(controls, {
    x = 96,
    normal_sprite = ui[3].bmp,
    hover_sprite = ui[4].bmp
})

local playback = create_button_group(menuBar, {
    x = 5,
    y = 95
})

local playButton = create_hover_button(playback, {
    x = 48,
    normal_sprite = ui[8].bmp,
    hover_sprite = ui[7].bmp,
    active_sprite = ui[12].bmp,
    active_hover_sprite = ui[11].bmp,
    toggle_mode = true,
    onactivate = function(self)
    	animation_playing = true
    end,
    ondeactivate = function(self)
    	animation_playing = false
    end
})

playButton.onclick = function(self)
    if not selected_animation then return end
    
    if self.active then
        afx_player:play(selected_animation)
    else
        afx_player:stop()
    end
end

local loopButton = create_hover_button(playback, {
    x = 96,
    normal_sprite = ui[6].bmp,
    hover_sprite = ui[5].bmp,
    active_sprite = ui[15].bmp,
    active_hover_sprite = ui[16].bmp,
    toggle_mode = true,
    onactivate = function(self)
    	animation_looping = true
    end,
    ondeactivate = function(self)
    	animation_looping = false
    end
})

local animation_list = create_animation_manager(menuBar, {
    y = 120
})
:: label.png
b64$iVBORw0KGgoAAAANSUhEUgAAAeAAAAEOCAIAAADe_FMwAAAHXklEQVR4Ae3dMWsbVwDA8Sch
gsCD4T6AwWTJ5MVQsEH_DDbuIjJkTMAgNGTv6CWDMBjSbh6Cp1CTpWuJQVnsJZM7lICXLsWQIRC8
uMOVQ0g66WTdSafL78dhzr7n03tP0v-WED4cOBwOh6OERy18OAgL1Nv9usiXm0m3vx6fRGfNjP9y
9_J7aZcDrLr60O-RWXPoWECdkzIWlN2M94_nN9OS890fqIDBbkxtyFBnZs1OxvHZszY6MuN84jFT
R-Z2v8bH0HmaRpYXvnvxPXue0gYvRbe-Pnn9QL51HozA3YvvceDyysJgc2a65_Dg7A_Ame6f4zJT
Az20jPhVs6x5noYmP_OYjj1PUhv-JRkw9m5pl5I7qDaQ7wNjnudH1kAnLxDfffKjZuzVWac1GN_x
GU0GDP4lrbODl0bTP-8T0icSFlC67N-KMkx_aBoT1jKUpuQ8a6AHSzR18QXtzuQZZ--fofQne-GI
WMcr1Wgoom6DX6vs37JkWPYQTb1z0cWP4zOUoAmZrqetITprJseE1Y4euawhPoZWNVjhwfIOPZ3S
_ptcfcQDINkTXydYIbNGaWzTCv3ip-Uq1pj8NFvM0yaJ5lBA06Y_2uvkufSI_Ob17AXigERnzTgO
8bdmciiGvlmFftEyJmtwWJb5FDfnWvhwsLA3b-KzIqMkx0Xo9tdn3eu8nlJA5Y22Kw5at78_dnyj
AisEWAljQ5xW5xBCLRwf2DWopOiqaRNWWt0WAJRTwxYAhfr14e-k-GXt6Uz-u3Zzn2XYt2dPZp3V
3fvzmcZHh22BBipb5-jXWRv9sP1-GWvX5_-evo7Pn796E0J49-b181dvHrbba9fnj2j0x8tPGUfu
tXaWsnsCDeQT4p9-_5pl5MuX_b-6oxtdcnUfLCAX--7yV-gjw1GMh_322s19xba04VMFrJx3b1-P
f5O91o5AA_Tj_as3ed0qOmzfvT--ePkp-rW1tXn5_Utax6PDtkADpHrYXk4ll6juXQcIIey1doZO
BBpgutr1_YTjcfeMDttTW7zX2okO28tadcMbD6yE2-7p2L9v7B5Vdcl17zqAQAPMa2P3KDkqv9iG
9xtYIbf903xvuNfa_Xj5Ke1SdNhe4mLr3m9ghWzsHiXH-Hdbbn_nani-gVz8_c9P4fcM42pzvcpt
-7Sg_X_8-DR0ItBAFbysPS3ozrXr8-hkY-do6phHiA7be62dtEvL3dVaOD7w2YJKiq6aNmGl1W0B
QDk1bAH8INZu7m1CyX179mTw17odASgngQYQaAAEGkCgARBoAIEGQKABEGgAgQZAoAEEGgCBBkCg
AUqtFo4P7AJUUnTVtAkrrW4LAAQaAIEGEGgACtKwBUChLrqd5Hy-d7L0OQxZ1pQEGiiF1tbmYCgX
3MSLbieZwNirpW20QAOLLvUiMz25zvGUSttogQaqnOn93snURpeWQAMVz3Tc6LQJCDTA0jJ90e2M
3nlsssum7vMBlCHTra3NIqJ50e0UdGeBBn6sTOdb0rjOo3dO-l7Q6wo0QKY6j1Z4v3dy_flLcuny
85f93olAA6TKN5STK5xcLW2dQwgNnwmgDGmOo7nIF93vnVx0O6Wts0ADP1CaL7qd0UaXeXMEGqh_
mkMIra3Nsckuc6MFGqh4midXu8yNFmigsmne751cdDutrc0J8yltnUMItXB84EMDlRRdNcswjYtu
Z7CYy53AaMHL-A4KNAg0JVW3BQACDYBAAwg0AAININAACDQAAg0g0AAINIBAAyDQAAg0gEADINAA
Ag2AQAMINAACDYBAAwg0AAININAACDQAAg0g0AAINIBAAyDQAAINgEADINAAAg2AQAMINAACDYBA
Awg0AAININAACDSAQAMg0AAINIBAAyDQAAINgEADINAAAg2AQAMINPADWru5twkCDZSxzrf9U40W
aKCkNFqgAY1GoAGNXhENWwBMtrF7FEL49uyJrViwWjg_sAtQSdFVc847rN3chxBu_6cbu0cCLdBA
iQLNctVtAYBAAyDQAAINgEADCDQAAg2AQAMINAACDSDQAAg0AAININAACDSAQAMg0AACDYBAAyDQ
AAINgEADCDQAAg2AQAMINAACDSDQAAg0gEADINAACDSAQAMg0AACDYBAAyDQAAINgEADCDQAAg0g
0AAINAACDSDQAAg0gEADINAACDSAQAMg0AACDYBAAyDQAAINgEADCDQAAg0g0AAINAACDSDQAAg0
gEADINAACDSAQAMg0AACDYBAAwg0AAINgEADCDQAAg0g0AAINAACDSDQAAg0gEADINAAAg2AQAMg
0AACDYBAAwg0AAINgEADCDQAAg0g0AAINAACDSDQAAg0gEADINAAAg2AQAMg0AACDYBAAwg0AAIN
gEADCDQAAg0g0AAINIBAAyDQAAg0gEADINAAAg2AQAMg0AACDYBAAwg0AAININAACDQAAg0g0AAI
NIBAAyDQAAg0gEADINAAAg2AQAMg0AACDYBAAwg0AAININAACDQAAg2wev4D6kxi5-vMUHcAAAAQ
dEVYdExvZGVQTkcAMjAxMTAyMjHjWbbBAAAAAElFTkSuQmCC
:: main.lua
--[[pod_format="raw",author="Arranged Godly",created="2024-12-11 20:55:39",modified="2024-12-15 21:45:18",notes="A tool for creating afx\nanimation files from gfx files",revision=1886,title="Animation Editor",version="0.1"]]
include "gui.lua"
include "popup.lua"
include "animation.lua"

current_afx = AFX:new()
afx_player = AFXPlayer:new(current_afx)
animation_playing = false
animation_looping = false
popup_open = false

function _init()
  get_display()
  window({
    width = 480,
    height = 270,
    title = "0.afx",
    has_frame = false,
    show_toolbar = true,
    tabbed = true,
    icon = userdata("[gfx]08087770777077707770777077700700070077777707777777777777777777777707[/gfx]"),
    x = 0,
    y = 0
  })
  
  mkdir("/ram/cart/afx")
  
end

function _update()
    gui:update_all()
    
    if popup_open then 
        popup_gui:update_all() 
    end
    
    if animation_playing and afx_player.current_animation then
        local current_frame = afx_player:update()
        if current_frame then
            -- Draw the current frame
            -- You'll need to implement the actual drawing based on your sprite system
        else
            -- Animation finished and not looping
            animation_playing = false
            playButton:set_active(false)
        end
    end
    
    if key("escape") then
        stop()
    end
end

function _draw()
	cls(theme"window_frame")
	gui:draw_all()
	
	if popup_open then popup_gui:draw_all() end
  
end
:: popup.lua
--[[pod_format="raw",created="2024-12-12 17:19:03",modified="2024-12-15 21:45:18",revision=1459]]
popup_gui = create_gui()
local ui = fetch("./gfx/ui.gfx")
settings = {
	height = 8,
	width = 8
}
frame = 1

local current_animation = {
	name = "",
	framerate = 12
}

local frame_state = {
	selected_frames = {},
	
	add_frame = function(self, sprite_num)
		table.insert(self.selected_frames, sprite_num)
		return #self.selected_frames
	end,
	
	remove_frame = function(self, sprite_num)
		for i, frame in ipairs(self.selected_frames) do
			if frame == sprite_num then
				table.remove(self.selected_frames, i)
				return true
			end
		end
		return false
	end,
	
	get_frame_number = function(self, sprite_num)
		for i, frame in ipairs(self.selected_frames) do
			if frame == sprite_num then
				return i
			end
		end
		return 0
	end,
	
	create_animation = function(self)
		if #self.selected_frames == 0 then return false end
		
		current_afx:add_animation(
			current_animation.name,
			self.selected_frames,
			current_animation.framerate,
			animation_looping
		)
		return true
	end,
	
	reset = function(self)
		self.selected_frames = {}
	end
}

local Window = popup_gui:attach{
	x = 32,
	y = 0,
	width = 256,
	height = 256,
	draw = function(self)
		fillBG(self,6)
	end
}

local closeButton = popup_gui:attach{
	x = 300,
	y = 2,
	width = 16,
	height = 16,
	hovered = 0,
	draw = function(self)
		if self.hovered > 0 then
			spr(ui[17].bmp)
		else
			spr(ui[18].bmp)
		end
	end,
	hover = function(self)
		self.hovered = 2
	end,
	click = function(self)
		popup_open = false
		reset_popup()
		sfx(1, 1)
	end,
	update = function(self)
		if self.hovered > 0 then
			self.hovered -= 1
		end
	end
}

local confirmButton = popup_gui:attach{
	x = 300,
	y = 40,
	width = 16,
	height = 16,
	hovered = 0,
	draw = function(self)
		if self.hovered > 0 then
			spr(ui[20].bmp)
		else
			spr(ui[19].bmp)
		end
	end,
	hover = function(self)
		self.hovered = 2
	end,
	click = function(self)
		if frame_state:create_animation() then
			current_afx:save("/ram/cart/afx/0.afx")
			sfx(10, 1)
			popup_open = false
			reset_popup()
		else
			sfx(1, 1)
		end
	end,
	update = function(self)
		if self.hovered > 0 then
			self.hovered -= 1
		end
	end
}

for h = 0, settings.height - 1 do
	for w = 0, settings.width - 1 do
		Window:attach{
			x = w * 32,
			y = h * 32,
			width = 32,
			height = 32,
			sprite_num = frame,
			hovered = 0,
			draw = function(self)
				rectfill(0, 0, self.width, self.height, 0)
				sspr(self.sprite_num, 0, 0, 16, 16, 0, 0, 32, 32)
				
				local frame_num = frame_state:get_frame_number(self.sprite_num)
				if frame_num > 0 then
					rect(0, 0, self.width-1, self.height-1, 7)
					print(frame_num, 2, 2, 7)
				end
			end,
			hover = function(self)
				self.hovered = 2
			end,
			click = function(self)
				local current_num = frame_state:get_frame_number(self.sprite_num)
				if current_num > 0 then
					frame_state:remove_frame(self.sprite_num)
					sfx(2, 1)
				else
					frame_state:add_frame(self.sprite_num)
					sfx(5, 1)
				end
			end,
			update = function(self)
				if self.hovered > 0 then
					self.hovered -= 1
				end
			end
		}
		frame += 1
	end
end

function fillBG(self, col)
	rectfill(0,0,self.width,self.height,col)
end

function reset_popup()
	frame_state:reset()
	frame = 1
end
:: .info.pod
b64$LS1bW3BvZCxhdXRob3I9IkFycmFuZ2VkIEdvZGx5IixjcmVhdGVkPSIyMDI0LTEyLTExIDIw
OjU2OjIzIixtb2RpZmllZD0iMjAyNC0xMi0xNSAyMTo0NToxOCIsaWNvbj11c2VyZGF0YSgidTgi
LDE2LDE2LCIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDcw
NzA3MDcwNzAwMDAwMDAwMDAwMDA3MDcwNzAwMDAwNzAxMDEwMTA3MDAwMDAwMDAwMDAwMDcwMTA3
MDAwMDA3MDEwMTAxMDcwMDAwMDAwMDAwMDAwNzA3MDcwMDAwMDcwNzA3MDcwNzAwMDAwMDAwMDAw
MDBkMDcwZDAwMDAwZDBkMDcwZDBkMDAwMDAwMDAwMDA3MDcwNzA3MDcwNzA3MDcwNzA3MDcwMDAw
MDcwMDAwMDcwNzA3MDcwNzA3MDcwNzA3MDcwNzAwMDcwNjAwMDAwNzA3MDcwMTAxMDEwNzAxMDEw
MTA3MDcwNjA2MDAwMDA3MDcwNzAxMDcwMTA3MDEwNzA3MDcwNzA2MDYwMDAwMDcwNzA3MDEwMTAx
MDcwMTAxMDcwNzA3MDYwNjAwMDAwNzA3MDcwMTA3MDEwNzAxMDcwNzA3MDcwNjA2MDAwMDBkMDcw
NzAxMDcwMTA3MDEwMTAxMDcwNzA2MDYwMDAwMDAwZDA3MDcwNzA3MDcwNzA3MDcwNzBkMDcwNjAw
MDAwMDAwMGQwNzA3MDcwNzA3MDcwNzA3MDAwZDA3MDAwMDAwMDAwMDBkMGQwZDBkMGQwZDBkMGQw
MDAwMGQwMCIpLG5vdGVzPSJBIHRvb2wgZm9yIGNvbnZlcnRpbmcgZ2Z4XG5maWxlcyBpbnRvIGFm
eCBhbmltYXRpb25zIixydW50aW1lPTEyLHRpdGxlPSJBbmltYXRpb24gRWRpdG9yIix2ZXJzaW9u
PSIwLjEiLHdvcmtzcGFjZXM9e3tsb2NhdGlvbj0ibWFpbi5sdWEjNTEiLHdvcmtzcGFjZV9pbmRl
eD0xfSx7bG9jYXRpb249Imd1aS5sdWEjNSIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0i
cG9wdXAubHVhIzkiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImJ1dHRvbi5sdWEjMTEi
LHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImFuaW1hdGlvbi5sdWEjNzgiLHdvcmtzcGFj
ZV9pbmRleD0xfSx7bG9jYXRpb249ImFuaW1hdGlvbl9tYW5hZ2VyLmx1YSM0OSIsd29ya3NwYWNl
X2luZGV4PTF9LHtsb2NhdGlvbj0iZ2Z4LzAuZ2Z4Iix3b3Jrc3BhY2VfaW5kZXg9Mn0se2xvY2F0
aW9uPSJnZngvdWkuZ2Z4Iix3b3Jrc3BhY2VfaW5kZXg9Mn0se2xvY2F0aW9uPSJtYXAvMC5tYXAi
LHdvcmtzcGFjZV9pbmRleD0zfSx7bG9jYXRpb249InNmeC8wLnNmeCIsd29ya3NwYWNlX2luZGV4
PTR9fV1d
:: [eoc]
